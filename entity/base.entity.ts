import { Entity, PrimaryGeneratedColumn, CreateDateColumn, UpdateDateColumn } from 'typeorm';
import DateWithTzTransformer from '@utils/transformer/date-with-tz';
import BaseInterface from 'dd-common-blocks/dist/interface/base.interface';
import UserEntity from '@entity/user.entity';
import { IsOptional, IsInt, IsDateString } from 'class-validator';
import { JSONSchema } from 'class-validator-jsonschema';

/**
 * Base entity
 * @category Entities
 * @subcategory Base
 */
@Entity()
export default abstract class BaseEntity implements BaseInterface {
	/**
	 * Auto generated ID
	 */
	@IsInt()
	@IsOptional()
	@JSONSchema({
		description: 'Auto generated ID',
		example: 534,
	})
	@PrimaryGeneratedColumn('increment')
	id: number;

	/**
	 * Created at timestamp
	 */
	@IsDateString()
	@IsOptional()
	@JSONSchema({
		description: 'Created at timestamp. Generated by DB',
		example: '2022-08-24T00:31:49+03:00',
	})
	@CreateDateColumn({
		name: 'createdAt',
		default: () => 'NOW()',
		type: 'timestamptz',
		precision: 3,
		transformer: new DateWithTzTransformer(),
		select: false,
	})
	readonly createdAt: Date;

	/**
	 * Updated at timestamp
	 */
	@IsDateString()
	@IsOptional()
	@JSONSchema({
		description: 'Updated at timestamp. Generated by DB',
		example: '2022-08-24T00:31:49+03:00',
	})
	@UpdateDateColumn({
		name: 'updatedAt',
		default: () => 'NOW()',
		type: 'timestamptz',
		precision: 3,
		transformer: new DateWithTzTransformer(),
		select: false,
	})
	readonly updatedAt: Date;

	_canEdit?(user?: UserEntity | undefined) {
		if (!user) return false;
		return user.isSuperAdmin() || user.isAdmin;;
	}

	_canCreate?(user?: UserEntity | undefined) {
		if (!user) return false;
		return user.isSuperAdmin() || user.isAdmin;
	}

	_canDelete?(user: UserEntity | undefined) {
		if (!user) return false;
		return user.isSuperAdmin()|| user.isAdmin;
	}
}
